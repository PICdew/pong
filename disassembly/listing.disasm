Disassembly Listing for mini-pong
Generated From:
C:/Users/Jacques/Documents/GitHub/mini-pong.X/dist/default/production/mini-pong.X.production.cof
2013-08-18 12:25:57

---  C:/Users/Jacques/Documents/GitHub/mini-pong.X/mini-pong.asm  ---------------------------------------
                                                  1:     ; NOM: mini-pong
                                                  2:     ; DESCRIPTION: Jeux mini-pong 16x21 pixels sur pic10f322
                                                  3:     ;              sortie vidéo NTSC
                                                  4:     ;              sortie audio
                                                  5:     ;              pointage indiqué en haut de l'écran
                                                  6:     ;              chaque joueur contrôle sa raquette à l'aide
                                                  7:     ;              de 2 boutons
                                                  8:     ;              au démarrage la joeur de gauche a le service
                                                  9:     ;              et doit déplacer sa raquette pour démarrer la partie
                                                  10:    ;
                                                  11:    ;              Le TIMER2 génère le signal de synchronisation NTSC
                                                  12:    ;              et une interruption est générer à la fin de chaque
                                                  13:    ;              cycle. Toute la logique du programme s'exécute
                                                  14:    ;              à l'intérieur de cette interruption.
                                                  15:    ;              la variable 'ln_cnt' compte les lignes de scan vidéo NTSC
                                                  16:    ;              mais est utilisée aussi par le céduleur de tâches.
                                                  17:    ;              le NCO génère le son produit lorsque la balle rebondi sur
                                                  18:    ;              une raquette ou un bord ainsi que le son plus grave et prolongé
                                                  19:    ;              lorsqu'un joueur manque la balle.
                                                  20:    ;
                                                  21:    ; AUTEUR: Jacquees Deschênes
                                                  22:    ; DATE: 2013-08-10
                                                  23:    
                                                  24:        include <p10f322.inc>
                                                  25:        include "include\pic10f322_m.inc"
                                                  26:        radix dec
                                                  27:    
                                                  28:        __config _FOSC_INTOSC & _MCLRE_OFF & _LVP_OFF & _WDTE_OFF & _CP_ON
                                                  29:    
                                                  30:    ; constantes
                                                  31:    #define PWM_PERIOD 254  ; peut nécessiter un ajustement de quelques unités (252-255)
                                                  32:                            ; dépend de la fréquence du HFOSC qui peut varier
                                                  33:                            ; d'un MCU à l'autre.
                                                  34:    #define SYNC_WIDTH  75  ; largeur de l'impulsion de synchronisation horizontale
                                                  35:                            ; signal NTSC.
                                                  36:    
                                                  37:    ; indicateurs booléens dans variable 'flags'
                                                  38:    #define F_BIT9 0  ; 9ième bit de ln_cnt
                                                  39:    #define F_VIDEO 1 ; affichage actif
                                                  40:    #define F_TONE 2  ; son actif
                                                  41:    #define F_PAUSE 3 ; action arrêtée
                                                  42:    #define F_SERVE 4 ; qui a le service, 0 gauche, 1 droite
                                                  43:    #define F_SCORE 5 ; 0 point à gauche, 1 point à droite
                                                  44:    #define F_MOVED 6 ; le joueur qui a le service a bougé sa raquette
                                                  45:    ;#define F_LMOVED 7 ; joueur de gauche a bougé sa raquette
                                                  46:    
                                                  47:    
                                                  48:    #define VIDEO_OUT RA0  ; sortie signal vidéo
                                                  49:    #define SYNC_OUT  RA1  ; sortie synchronisation NTSC
                                                  50:    #define AUDIO_OUT RA2  ; sortie audio
                                                  51:    #define DOWN_BTN RA2   ; bouton déplacement vers le bas
                                                  52:    #define UP_BTN RA3     ; vers le haut
                                                  53:    
                                                  54:    #define BALL_DLY  10     ; détermine la vitesse de la balle
                                                  55:    #define SCORE_TONE 30   ; tonalité lorsqu'un point est compté
                                                  56:    #define SCORE_LENGTH 50 ; durée de la tonalité
                                                  57:    #define PING_TONE 58    ; tonalité lorsque la balle frappe la raquette ou rebondie.
                                                  58:    #define PING_LENGTH 6   ; durée
                                                  59:    #define BTN_DLY 14       ; détermine la vitesse des raquettes
                                                  60:    
                                                  61:    ; macros
                                                  62:    
                                                  63:    delay_us macro us ; délais en micro-secondes, overhead 250nsec.
                                                  64:        movlw us
                                                  65:        addlw H'FF'
                                                  66:        skpz
                                                  67:        goto $-2
                                                  68:        endm
                                                  69:    
                                                  70:    tone macro freq   ; démarre la tonalitée
                                                  71:        set_nco_incr freq
                                                  72:        enable_nco_output
                                                  73:        bsf flags, F_TONE
                                                  74:        if freq==PING_TONE
                                                  75:        movlw PING_LENGTH
                                                  76:        else
                                                  77:        movlw SCORE_LENGTH
                                                  78:        endif
                                                  79:        movwf tone_length
                                                  80:        bcf TRISA, AUDIO_OUT
                                                  81:        endm
                                                  82:    
                                                  83:    wait_count macro count ; attend que TMR2 est atteint le compte
                                                  84:        movlw count
                                                  85:        subwf TMR2,W
                                                  86:        skpc
                                                  87:        goto $-3
                                                  88:        endm
                                                  89:    
                                                  90:    ; variables
                                                  91:        udata MINRAM
                                                  92:    disp res 42  ; mémoire bitmap affichage 16x21 pixels
                                                  93:    LScore res 1    ; pointage joueur de gauche
                                                  94:    RScore res 1    ; pointage joueur de droite
                                                  95:    flags res 1   ; indicateurs booléens
                                                  96:    ln_cnt res 1  ; compteur lignes scan NTSC, 9ième bit dans 'flags'
                                                  97:    ballx res 1 ; position horizontale de la balle
                                                  98:    bally res 1 ; position verticale de la balle
                                                  99:    dx  res 1 ; delta x déplacement balle {-1,0,1}
                                                  100:   dy  res 1 ; delta y déplacement balle {-1,0,1}
                                                  101:   ball_speed res 1 ; vitesse de la balle, multiple de 16,7msec
                                                  102:   tone_length res 1 ; durée de la tonalité
                                                  103:   btn_dly res 1   ; délais lecture boutons
                                                  104:   LPaddle res 1   ; position raquette joueur de gauche
                                                  105:   RPaddle res 1   ; position raquette joueur de droite
                                                  106:   temp res 1      ; 3 variables temporaires
                                                  107:   temp2 res 1
                                                  108:   temp3 res 1
                                                  109:   
                                                  110:       code
                                                  111:       org 0
                                                  112:   rst_vector
0000  018E     CLRF OPTION_REG                    113:       clrf OPTION_REG
0001  1589     BSF WPUA, 0x3                      114:       bsf WPUA, RA3
0002  29E0     GOTO 0x1E0                         115:       goto init
                                                  116:   
                                                  117:       org 4
                                                  118:   isr_vector
0004  3001     MOVLW 0x1                          119:       movlw 1
0005  0AED     INCF 0x6D, F                       120:       incf ln_cnt
0006  1903     BTFSC STATUS, 0x2                  121:       skpnz
0007  06EC     XORWF 0x6C, F                      122:       xorwf flags
                                                  123:       ; céduleur de tâche
0008  18EC     BTFSC 0x6C, 0x1                    124:       btfsc flags, F_VIDEO
0009  282E     GOTO 0x2E                          125:       goto video_output
000A  1C6C     BTFSS 0x6C, 0x0                    126:       btfss flags, F_BIT9
000B  2810     GOTO 0x10                          127:       goto $+5
000C  3006     MOVLW 0x6                          128:       movlw 6
000D  026D     SUBWF 0x6D, W                      129:       subwf ln_cnt, W
000E  1903     BTFSC STATUS, 0x2                  130:       skpnz
000F  2834     GOTO 0x34                          131:       goto sync_start
0010  3001     MOVLW 0x1                          132:       movlw 1
0011  026D     SUBWF 0x6D, W                      133:       subwf ln_cnt, W
0012  1903     BTFSC STATUS, 0x2                  134:       skpnz
0013  284E     GOTO 0x4E                          135:       goto update_score
0014  3003     MOVLW 0x3                          136:       movlw 3
0015  026D     SUBWF 0x6D, W                      137:       subwf ln_cnt, W
0016  1903     BTFSC STATUS, 0x2                  138:       skpnz
0017  2849     GOTO 0x49                          139:       goto sync_end
0018  3006     MOVLW 0x6                          140:       movlw 6
0019  026D     SUBWF 0x6D, W                      141:       subwf ln_cnt, W
001A  1903     BTFSC STATUS, 0x2                  142:       skpnz
001B  282B     GOTO 0x2B                          143:       goto move_ball
001C  3007     MOVLW 0x7                          144:       movlw 7
001D  026D     SUBWF 0x6D, W                      145:       subwf ln_cnt, W
001E  1903     BTFSC STATUS, 0x2                  146:       skpnz
001F  2825     GOTO 0x25                          147:       goto read_buttons
0020  301D     MOVLW 0x1D                         148:       movlw 29
0021  026D     SUBWF 0x6D, W                      149:       subwf ln_cnt, W
0022  1903     BTFSC STATUS, 0x2                  150:       skpnz
0023  2850     GOTO 0x50                          151:       goto disp_start
0024  2860     GOTO 0x60                          152:       goto isr_exit ; aucune tâche à accomplir
                                                  153:   read_buttons
0025  196C     BTFSC 0x6C, 0x2                    154:       btfsc flags, F_TONE
0026  2860     GOTO 0x60                          155:       goto isr_exit
0027  08F4     MOVF 0x74, F                       156:       movf btn_dly, F
0028  1903     BTFSC STATUS, 0x2                  157:       skpnz
0029  20C8     CALL 0xC8                          158:       call buttons
002A  2860     GOTO 0x60                          159:       goto isr_exit
                                                  160:   move_ball
002B  1DEC     BTFSS 0x6C, 0x3                    161:       btfss flags, F_PAUSE
002C  2106     CALL 0x106                         162:       call ball_control
002D  2860     GOTO 0x60                          163:       goto isr_exit
                                                  164:   video_output
002E  30C6     MOVLW 0xC6                         165:       movlw 198
002F  026D     SUBWF 0x6D, W                      166:       subwf ln_cnt, W
0030  1903     BTFSC STATUS, 0x2                  167:       skpnz
0031  2852     GOTO 0x52                          168:       goto disp_end
0032  207C     CALL 0x7C                          169:       call video
0033  2860     GOTO 0x60                          170:       goto isr_exit
                                                  171:   sync_start
0034  30EB     MOVLW 0xEB                         172:       set_pwm_duty_cycle PWM_CH2, ((PWM_PERIOD<<2)-SYNC_WIDTH)
0035  0098     MOVWF PWM2DCH
0036  3040     MOVLW 0x40
0037  0097     MOVWF PWM2DCL
0038  08F2     MOVF 0x72, F                       173:       movf ball_speed, F
0039  1D03     BTFSS STATUS, 0x2                  174:       skpz
003A  03F2     DECF 0x72, F                       175:       decf ball_speed
003B  08F4     MOVF 0x74, F                       176:       movf btn_dly, F
003C  1D03     BTFSS STATUS, 0x2                  177:       skpz
003D  03F4     DECF 0x74, F                       178:       decf btn_dly, F
003E  1D6C     BTFSS 0x6C, 0x2                    179:       btfss flags, F_TONE
003F  2844     GOTO 0x44                          180:       goto $+5
0040  0BF3     DECFSZ 0x73, F                     181:       decfsz tone_length
0041  2845     GOTO 0x45                          182:       goto $+4
0042  116C     BCF 0x6C, 0x2                      183:       bcf flags, F_TONE
0043  132D     BCF NCO1CON, 0x6                   184:       disable_nco_output
0044  1506     BSF TRISA, 0x2                     185:       bsf TRISA, AUDIO_OUT
0045  01ED     CLRF 0x6D                          186:       clrf ln_cnt
0046  106C     BCF 0x6C, 0x0                      187:       bcf flags, F_BIT9
0047  21AF     CALL 0x1AF                         188:       call draw_table
0048  2860     GOTO 0x60                          189:       goto isr_exit
                                                  190:   sync_end
0049  3012     MOVLW 0x12                         191:       set_pwm_duty_cycle PWM_CH2, SYNC_WIDTH
004A  0098     MOVWF PWM2DCH
004B  30C0     MOVLW 0xC0
004C  0097     MOVWF PWM2DCL
004D  2860     GOTO 0x60                          192:       goto isr_exit
                                                  193:   update_score
004E  21CF     CALL 0x1CF                         194:       call draw_score
004F  2860     GOTO 0x60                          195:       goto isr_exit
                                                  196:   disp_start
0050  14EC     BSF 0x6C, 0x1                      197:       bsf flags, F_VIDEO
0051  2860     GOTO 0x60                          198:       goto isr_exit
                                                  199:   disp_end
0052  10EC     BCF 0x6C, 0x1                      200:       bcf flags, F_VIDEO
                                                  201:   draw_side
0053  3043     MOVLW 0x43                         202:       wait_count 67
0054  0211     SUBWF TMR2, W
0055  1C03     BTFSS STATUS, 0x0
0056  2853     GOTO 0x53
0057  2858     GOTO 0x58                          203:       goto $+1  ; délais supplémentaire
0058  1006     BCF TRISA, 0x0                     204:       bcf TRISA, VIDEO_OUT
0059  1405     BSF PORTA, 0x0                     205:       bsf PORTA, VIDEO_OUT
005A  30D0     MOVLW 0xD0                         206:       wait_count 208
005B  0211     SUBWF TMR2, W
005C  1C03     BTFSS STATUS, 0x0
005D  285A     GOTO 0x5A
005E  1005     BCF PORTA, 0x0                     207:       bcf PORTA, VIDEO_OUT
005F  1406     BSF TRISA, 0x0                     208:       bsf TRISA, VIDEO_OUT
                                                  209:   isr_exit
0060  108C     BCF PIR1, 0x1                      210:       bcf PIR1, TMR2IF
0061  0009     RETFIE                             211:       retfie
                                                  212:   
                                                  213:   ; table des glyphes pour les caractères
                                                  214:   ; numérique, 2 digits compressés dans
                                                  215:   ; 5 octets
                                                  216:   digits
0062  0782     ADDWF PCL, F                       217:       addwf PCL, F
0063  3444     RETLW 0x44                         218:       dt  H'44',H'AC',H'A4',H'A4',H'4E' ; 0, 1
0064  34AC     RETLW 0xAC
0065  34A4     RETLW 0xA4
0066  34A4     RETLW 0xA4
0067  344E     RETLW 0x4E
0068  34EE     RETLW 0xEE                         219:       dt  H'EE',H'22',H'CC',H'82',H'EE' ; 2, 3
0069  3422     RETLW 0x22
006A  34CC     RETLW 0xCC
006B  3482     RETLW 0x82
006C  34EE     RETLW 0xEE
006D  34AE     RETLW 0xAE                         220:       dt  H'AE',H'A8',H'EE',H'22',H'2E' ; 4, 5
006E  34A8     RETLW 0xA8
006F  34EE     RETLW 0xEE
0070  3422     RETLW 0x22
0071  342E     RETLW 0x2E
0072  34CE     RETLW 0xCE                         221:       dt  H'CE',H'82',H'E2',H'A2',H'E2' ; 6, 7
0073  3482     RETLW 0x82
0074  34E2     RETLW 0xE2
0075  34A2     RETLW 0xA2
0076  34E2     RETLW 0xE2
0077  34EE     RETLW 0xEE                         222:       dt  H'EE',H'AA',H'EE',H'A2',H'E6' ; 8, 9
0078  34AA     RETLW 0xAA
0079  34EE     RETLW 0xEE
007A  34A2     RETLW 0xA2
007B  34E6     RETLW 0xE6
                                                  223:   
                                                  224:   ;******************************
                                                  225:   ; video, génère la sortie vidéo
                                                  226:   ; entrée: disp est le bitmap
                                                  227:   ;         contenant les pixels
                                                  228:   ;         à afficher
                                                  229:   ;*******************************
                                                  230:   video
007C  3046     MOVLW 0x46                         231:       movlw 30+40
007D  026D     SUBWF 0x6D, W                      232:       subwf ln_cnt, W
007E  1903     BTFSC STATUS, 0x2                  233:       skpnz
007F  2853     GOTO 0x53                          234:       goto draw_side
0080  3030     MOVLW 0x30                         235:       wait_count 48
0081  0211     SUBWF TMR2, W
0082  1C03     BTFSS STATUS, 0x0
0083  2880     GOTO 0x80
0084  301E     MOVLW 0x1E                         236:       movlw 30
0085  026D     SUBWF 0x6D, W                      237:       subwf ln_cnt, W
0086  0084     MOVWF FSR                          238:       movwf FSR
0087  1006     BCF TRISA, 0x0                     239:       bcf TRISA, VIDEO_OUT
0088  3008     MOVLW 0x8                          240:       movlw 8
0089  00F7     MOVWF 0x77                         241:       movwf temp
008A  01F8     CLRF 0x78                          242:       clrf temp2
008B  1003     BCF STATUS, 0x0                    243:       clrc
008C  0C84     RRF FSR, F                         244:       rrf FSR, F
008D  1003     BCF STATUS, 0x0                    245:       clrc
008E  0C84     RRF FSR, F                         246:       rrf FSR, F
008F  1004     BCF FSR, 0x0                       247:       bcf FSR, 0 ; début à l'octet pair
0090  3040     MOVLW 0x40                         248:       movlw disp
0091  0784     ADDWF FSR, F                       249:       addwf FSR, F
0092  0800     MOVF INDF, W                       250:       movfw INDF
0093  00F9     MOVWF 0x79                         251:       movwf temp3
                                                  252:   pixel_loop
0094  0DF9     RLF 0x79, F                        253:       rlf temp3, F
0095  0D79     RLF 0x79, W                        254:       rlf temp3, W
0096  3901     ANDLW 0x1                          255:       andlw 1
0097  3E02     ADDLW 0x2                          256:       addlw 2
0098  0085     MOVWF PORTA                        257:       movwf PORTA
0099  0BF7     DECFSZ 0x77, F                     258:       decfsz temp, F
009A  2894     GOTO 0x94                          259:       goto pixel_loop
009B  1878     BTFSC 0x78, 0x0                    260:       btfsc temp2, 0
009C  28A7     GOTO 0xA7                          261:       goto video_exit
009D  1478     BSF 0x78, 0x0                      262:       bsf temp2, 0
009E  0A84     INCF FSR, F                        263:       incf FSR
009F  0800     MOVF INDF, W                       264:       movfw INDF
00A0  00F9     MOVWF 0x79                         265:       movwf temp3
00A1  3008     MOVLW 0x8                          266:       movlw 8
00A2  1005     BCF PORTA, 0x0                     267:       bcf PORTA, VIDEO_OUT
00A3  1405     BSF PORTA, 0x0                     268:       bsf PORTA, VIDEO_OUT
00A4  00F7     MOVWF 0x77                         269:       movwf temp
00A5  1005     BCF PORTA, 0x0                     270:       bcf PORTA, VIDEO_OUT
00A6  2894     GOTO 0x94                          271:       goto pixel_loop
                                                  272:   video_exit
00A7  3001     MOVLW 0x1                          273:       delay_us 1
00A8  3EFF     ADDLW 0xFF
00A9  1D03     BTFSS STATUS, 0x2
00AA  28A8     GOTO 0xA8
00AB  1005     BCF PORTA, 0x0                     274:       bcf PORTA, VIDEO_OUT
00AC  1406     BSF TRISA, 0x0                     275:       bsf TRISA, VIDEO_OUT
00AD  0008     RETURN                             276:       return
                                                  277:   
                                                  278:   ;***********************************
                                                  279:   ; arrête l'action suite en attente
                                                  280:   ; du service
                                                  281:   ; les raquette sont placées à mi-hauteur
                                                  282:   ;***********************************
                                                  283:   set_pause
00AE  15EC     BSF 0x6C, 0x3                      284:       bsf flags, F_PAUSE
00AF  3007     MOVLW 0x7                          285:       movlw 7
00B0  00EF     MOVWF 0x6F                         286:       movwf bally
00B1  3006     MOVLW 0x6                          287:       movlw 6
00B2  00F5     MOVWF 0x75                         288:       movwf LPaddle
00B3  00F6     MOVWF 0x76                         289:       movwf RPaddle
00B4  3001     MOVLW 0x1                          290:       movlw 1
00B5  00EE     MOVWF 0x6E                         291:       movwf ballx
00B6  00F0     MOVWF 0x70                         292:       movwf dx
00B7  1E6C     BTFSS 0x6C, 0x4                    293:       btfss flags, F_SERVE
00B8  0008     RETURN                             294:       return
00B9  300E     MOVLW 0xE                          295:       movlw 14
00BA  00EE     MOVWF 0x6E                         296:       movwf ballx
00BB  09F0     COMF 0x70, F                       297:       comf dx
00BC  0AF0     INCF 0x70, F                       298:       incf dx
00BD  0008     RETURN                             299:       return
                                                  300:   
                                                  301:   
                                                  302:   ;*********************************
                                                  303:   ; bound_paddle, s'assure que les raquettes
                                                  304:   ; demeure dans les limites de la table
                                                  305:   ; entrée: W contient le pointeur de la raquette
                                                  306:   ;         à vérifier
                                                  307:   ;*****************************************
                                                  308:   bound_paddle    
00BE  0084     MOVWF FSR                          309:       movwf FSR   
00BF  1B80     BTFSC INDF, 0x7                    310:       btfsc INDF, 7
00C0  0180     CLRF INDF                          311:       clrf INDF
00C1  300E     MOVLW 0xE                          312:       movlw 14
00C2  0200     SUBWF INDF, W                      313:       subwf INDF, W
00C3  1D03     BTFSS STATUS, 0x2                  314:       skpz
00C4  0008     RETURN                             315:       return
00C5  300D     MOVLW 0xD                          316:       movlw 13
00C6  0080     MOVWF INDF                         317:       movwf INDF
00C7  0008     RETURN                             318:       return
                                                  319:   
                                                  320:   ;********************************
                                                  321:   ; buttons, fait la lectures des boutons
                                                  322:   ; de contrôle du jeux.
                                                  323:   ; La lecture se fait dans l'intervalle
                                                  324:   ; ou l'affichage vidéo est inactif.
                                                  325:   ; la sortie vidéo (RA0) est utilisée pour
                                                  326:   ; contrôler quel boutons sont lus, i.e.
                                                  327:   ; gauche ou droite.
                                                  328:   ;*********************************
                                                  329:   buttons  
00C8  136C     BCF 0x6C, 0x6                      330:       bcf flags, F_MOVED
00C9  1005     BCF PORTA, 0x0                     331:       bcf PORTA, RA0
00CA  1006     BCF TRISA, 0x0                     332:       bcf TRISA, RA0 ; mode sortie
00CB  3004     MOVLW 0x4                          333:       delay_us 4
00CC  3EFF     ADDLW 0xFF
00CD  1D03     BTFSS STATUS, 0x2
00CE  28CC     GOTO 0xCC
                                                  334:       ; lecture boutons de droite
00CF  0805     MOVF PORTA, W                      335:       movfw PORTA
00D0  00F7     MOVWF 0x77                         336:       movwf temp
                                                  337:       ; lecture boutons de gauche
00D1  1405     BSF PORTA, 0x0                     338:       bsf PORTA, RA0
00D2  3004     MOVLW 0x4                          339:       delay_us 4
00D3  3EFF     ADDLW 0xFF
00D4  1D03     BTFSS STATUS, 0x2
00D5  28D3     GOTO 0xD3
00D6  0805     MOVF PORTA, W                      340:       movfw PORTA
00D7  00F8     MOVWF 0x78                         341:       movwf temp2
                                                  342:       ; remet le port à l'état initial
00D8  1406     BSF TRISA, 0x0                     343:       bsf TRISA, RA0
00D9  1005     BCF PORTA, 0x0                     344:       bcf PORTA, RA0
                                                  345:   ; lecture boutons droites
00DA  19F7     BTFSC 0x77, 0x3                    346:       btfsc temp, RA3
00DB  28DF     GOTO 0xDF                          347:       goto $+4
00DC  03F6     DECF 0x76, F                       348:       decf RPaddle
00DD  1A6C     BTFSC 0x6C, 0x4                    349:       btfsc flags, F_SERVE
00DE  176C     BSF 0x6C, 0x6                      350:       bsf flags, F_MOVED
00DF  1977     BTFSC 0x77, 0x2                    351:       btfsc temp, RA2
00E0  28E4     GOTO 0xE4                          352:       goto $+4
00E1  0AF6     INCF 0x76, F                       353:       incf RPaddle
00E2  1A6C     BTFSC 0x6C, 0x4                    354:       btfsc flags, F_SERVE
00E3  176C     BSF 0x6C, 0x6                      355:       bsf flags, F_MOVED
                                                  356:   ; lecture boutons gauches
00E4  19F8     BTFSC 0x78, 0x3                    357:       btfsc temp2, RA3
00E5  28E9     GOTO 0xE9                          358:       goto $+4
00E6  03F5     DECF 0x75, F                       359:       decf LPaddle
00E7  1E6C     BTFSS 0x6C, 0x4                    360:       btfss flags, F_SERVE
00E8  176C     BSF 0x6C, 0x6                      361:       bsf flags, F_MOVED
00E9  1978     BTFSC 0x78, 0x2                    362:       btfsc temp2, RA2
00EA  28EE     GOTO 0xEE                          363:       goto $+4
00EB  0AF5     INCF 0x75, F                       364:       incf LPaddle
00EC  1E6C     BTFSS 0x6C, 0x4                    365:       btfss flags, F_SERVE
00ED  176C     BSF 0x6C, 0x6                      366:       bsf flags, F_MOVED
                                                  367:   ; libère si pause
00EE  1F6C     BTFSS 0x6C, 0x6                    368:       btfss flags, F_MOVED
00EF  28F5     GOTO 0xF5                          369:       goto buttons_exit
00F0  1DEC     BTFSS 0x6C, 0x3                    370:       btfss flags, F_PAUSE
00F1  28F5     GOTO 0xF5                          371:       goto buttons_exit
00F2  11EC     BCF 0x6C, 0x3                      372:       bcf flags, F_PAUSE
00F3  0870     MOVF 0x70, W                       373:       movfw dx
00F4  07EE     ADDWF 0x6E, F                      374:       addwf ballx
                                                  375:   buttons_exit
00F5  3076     MOVLW 0x76                         376:       movlw RPaddle
00F6  20BE     CALL 0xBE                          377:       call bound_paddle
00F7  3075     MOVLW 0x75                         378:       movlw LPaddle
00F8  20BE     CALL 0xBE                          379:       call bound_paddle
00F9  0008     RETURN                             380:       return
                                                  381:   
                                                  382:   ;********************************
                                                  383:   ; set_dy, détermine la valeur de dy
                                                  384:   ; si la balle est passé au dessus du centre de la raquette
                                                  385:   ; elle repart vers le haut (dy=-1)
                                                  386:   ; si la balle frappe la raquette au centre elle
                                                  387:   ; repart en ligne droite (dy=0)
                                                  388:   ; si elle est au dessous du centre elle repart
                                                  389:   ; vers le bas (dy=1)
                                                  390:   ; entrée: W = pointeur raquette qui a reçue la balle
                                                  391:   ;*********************************
                                                  392:   set_dy  
00FA  0084     MOVWF FSR                          393:       movwf FSR
00FB  0800     MOVF INDF, W                       394:       movfw INDF
00FC  3E01     ADDLW 0x1                          395:       addlw 1
00FD  026F     SUBWF 0x6F, W                      396:       subwf bally, W
00FE  1903     BTFSC STATUS, 0x2                  397:       skpnz
00FF  0008     RETURN                             398:       return
0100  1803     BTFSC STATUS, 0x0                  399:       skpnc
0101  30FF     MOVLW 0xFF                         400:       movlw -1
0102  1C03     BTFSS STATUS, 0x0                  401:       skpc
0103  3001     MOVLW 0x1                          402:       movlw 1
0104  00F1     MOVWF 0x71                         403:       movwf dy
0105  0008     RETURN                             404:       return
                                                  405:   
                                                  406:   ;*******************************
                                                  407:   ; ball_control, controle le mouvement
                                                  408:   ; de la balle en la faisant rebondir
                                                  409:   ; sur les raquettes et sur les bords
                                                  410:   ; haut et bas de la table.
                                                  411:   ;*******************************
                                                  412:   ball_control
0106  08F2     MOVF 0x72, F                       413:       movf ball_speed, F
0107  1D03     BTFSS STATUS, 0x2                  414:       skpz
0108  0008     RETURN                             415:       return
0109  0871     MOVF 0x71, W                       416:       movfw dy
010A  00F7     MOVWF 0x77                         417:       movwf temp
010B  300A     MOVLW 0xA                          418:       movlw BALL_DLY
010C  00F2     MOVWF 0x72                         419:       movwf ball_speed
010D  0870     MOVF 0x70, W                       420:       movfw dx
010E  07EE     ADDWF 0x6E, F                      421:       addwf ballx
010F  0871     MOVF 0x71, W                       422:       movfw dy
0110  07EF     ADDWF 0x6F, F                      423:       addwf bally
                                                  424:   check_y_bounds
0111  1903     BTFSC STATUS, 0x2                  425:       skpnz
0112  2917     GOTO 0x117                         426:       goto invert_dy
0113  300F     MOVLW 0xF                          427:       movlw 15
0114  026F     SUBWF 0x6F, W                      428:       subwf bally, W
0115  1C03     BTFSS STATUS, 0x0                  429:       skpc
0116  2922     GOTO 0x122                         430:       goto check_x_bounds
                                                  431:   invert_dy
0117  09F1     COMF 0x71, F                       432:       comf dy, F
0118  0AF1     INCF 0x71, F                       433:       incf dy, F
0119  3000     MOVLW 0x0                          434:       tone PING_TONE
011A  00AB     MOVWF NCO1INCH
011B  303A     MOVLW 0x3A
011C  00AA     MOVWF NCO1INCL
011D  172D     BSF NCO1CON, 0x6
011E  156C     BSF flags, 0x2
011F  3006     MOVLW 0x6
0120  00F3     MOVWF tone_length
0121  1106     BCF TRISA, 0x2
                                                  435:   check_x_bounds
0122  08EE     MOVF 0x6E, F                       436:       movf ballx, F
0123  1903     BTFSC STATUS, 0x2                  437:       skpnz
0124  2929     GOTO 0x129                         438:       goto invert_dx
0125  300F     MOVLW 0xF                          439:       movlw 15
0126  026E     SUBWF 0x6E, W                      440:       subwf ballx,W
0127  1D03     BTFSS STATUS, 0x2                  441:       skpz
0128  0008     RETURN                             442:       return
                                                  443:   invert_dx
0129  09F0     COMF 0x70, F                       444:       comf dx
012A  0AF0     INCF 0x70, F                       445:       incf dx
012B  3000     MOVLW 0x0                          446:       tone PING_TONE
012C  00AB     MOVWF NCO1INCH
012D  303A     MOVLW 0x3A
012E  00AA     MOVWF NCO1INCL
012F  172D     BSF NCO1CON, 0x6
0130  156C     BSF flags, 0x2
0131  3006     MOVLW 0x6
0132  00F3     MOVWF tone_length
0133  1106     BCF TRISA, 0x2
0134  08EE     MOVF 0x6E, F                       447:       movf ballx, F
0135  1903     BTFSC STATUS, 0x2                  448:       skpnz
0136  2945     GOTO 0x145                         449:       goto check_left_collision
                                                  450:   ; a atteint le côté droit
0137  0876     MOVF 0x76, W                       451:       movfw RPaddle
0138  20FA     CALL 0xFA                          452:       call set_dy
0139  0877     MOVF 0x77, W                       453:       movfw temp
013A  0776     ADDWF 0x76, W                      454:       addwf RPaddle,W
013B  026F     SUBWF 0x6F, W                      455:       subwf bally, W
013C  1C03     BTFSS STATUS, 0x0                  456:       skpc
013D  2956     GOTO 0x156                         457:       goto right_missed
013E  3003     MOVLW 0x3                          458:       movlw 3
013F  0776     ADDWF 0x76, W                      459:       addwf RPaddle, W
0140  0777     ADDWF 0x77, W                      460:       addwf temp, W
0141  026F     SUBWF 0x6F, W                      461:       subwf bally, W
0142  1803     BTFSC STATUS, 0x0                  462:       skpnc
0143  2956     GOTO 0x156                         463:       goto right_missed
0144  0008     RETURN                             464:       return
                                                  465:   check_left_collision ; a atteint le côté gauche
0145  0875     MOVF 0x75, W                       466:       movfw LPaddle
0146  20FA     CALL 0xFA                          467:       call set_dy
0147  0877     MOVF 0x77, W                       468:       movfw temp
0148  0775     ADDWF 0x75, W                      469:       addwf LPaddle,W
0149  026F     SUBWF 0x6F, W                      470:       subwf bally, W
014A  1C03     BTFSS STATUS, 0x0                  471:       skpc
014B  2953     GOTO 0x153                         472:       goto left_missed
014C  3003     MOVLW 0x3                          473:       movlw 3
014D  0775     ADDWF 0x75, W                      474:       addwf LPaddle, W
014E  0777     ADDWF 0x77, W                      475:       addwf temp, W
014F  026F     SUBWF 0x6F, W                      476:       subwf bally, W
0150  1803     BTFSC STATUS, 0x0                  477:       skpnc
0151  2953     GOTO 0x153                         478:       goto left_missed
0152  0008     RETURN                             479:       return
                                                  480:   left_missed
0153  16EC     BSF 0x6C, 0x5                      481:       bsf flags, F_SCORE
0154  2169     CALL 0x169                         482:       call player_score
0155  0008     RETURN                             483:       return
                                                  484:   right_missed
0156  12EC     BCF 0x6C, 0x5                      485:       bcf flags, F_SCORE
0157  2169     CALL 0x169                         486:       call player_score
0158  0008     RETURN                             487:       return
                                                  488:   
                                                  489:   ;*********************************
                                                  490:   ; inc_score, incrémente le pointage
                                                  491:   ; du joueur qui a gagné l'échange.
                                                  492:   ; fait l'ajustement B.C.D. du compte.
                                                  493:   ; entrée: W contient le pointeur du
                                                  494:   ;         joueur qui gagné l'échange.
                                                  495:   ;**********************************
                                                  496:   inc_score
0159  0084     MOVWF FSR                          497:       movwf FSR
015A  0A80     INCF INDF, F                       498:       incf INDF
015B  0800     MOVF INDF, W                       499:       movfw INDF
015C  390F     ANDLW 0xF                          500:       andlw 15
015D  3C09     SUBLW 0x9                          501:       sublw 9
015E  1803     BTFSC STATUS, 0x0                  502:       skpnc
015F  0008     RETURN                             503:       return
0160  30F0     MOVLW 0xF0                         504:       movlw H'F0'
0161  0580     ANDWF INDF, F                      505:       andwf INDF
0162  3010     MOVLW 0x10                         506:       movlw H'10'
0163  0780     ADDWF INDF, F                      507:       addwf INDF
0164  30A0     MOVLW 0xA0                         508:       movlw H'A0'
0165  0200     SUBWF INDF, W                      509:       subwf INDF,W
0166  1903     BTFSC STATUS, 0x2                  510:       skpnz
0167  0180     CLRF INDF                          511:       clrf INDF
0168  0008     RETURN                             512:       return
                                                  513:   
                                                  514:   ;************************************
                                                  515:   ; player_score, vérifie à qui va le point
                                                  516:   ; et appelle inc_score avec le pointeur
                                                  517:   ; du joueur gagnant.
                                                  518:   ; appel set_pause pour arrêter l'action
                                                  519:   ; en attente du prochain service.
                                                  520:   ;*************************************
                                                  521:   player_score 
0169  126C     BCF 0x6C, 0x4                      522:       bcf flags, F_SERVE
016A  1EEC     BTFSS 0x6C, 0x5                    523:       btfss flags, F_SCORE ; 0 gauche, 1 droite
016B  296F     GOTO 0x16F                         524:       goto left_score
016C  166C     BSF 0x6C, 0x4                      525:       bsf flags, F_SERVE
016D  306B     MOVLW 0x6B                         526:       movlw RScore
016E  2970     GOTO 0x170                         527:       goto $+2
                                                  528:   left_score
016F  306A     MOVLW 0x6A                         529:       movlw LScore
0170  2159     CALL 0x159                         530:       call inc_score
0171  3000     MOVLW 0x0                          531:       tone SCORE_TONE
0172  00AB     MOVWF NCO1INCH
0173  301E     MOVLW 0x1E
0174  00AA     MOVWF NCO1INCL
0175  172D     BSF NCO1CON, 0x6
0176  156C     BSF flags, 0x2
0177  3032     MOVLW 0x32
0178  00F3     MOVWF tone_length
0179  1106     BCF TRISA, 0x2
017A  20AE     CALL 0xAE                          532:       call set_pause
017B  0008     RETURN                             533:       return
                                                  534:   
                                                  535:   ;**************************
                                                  536:   ; draw_lpaddle, dessine la
                                                  537:   ; raquette de gauche
                                                  538:   ;**************************
                                                  539:   draw_lpaddle     ; dessine raquette de gauche
017C  304A     MOVLW 0x4A                         540:       movlw disp+10
017D  0084     MOVWF FSR                          541:       movwf FSR
017E  1003     BCF STATUS, 0x0                    542:       clrc
017F  0D75     RLF 0x75, W                        543:       rlf LPaddle, W
0180  0784     ADDWF FSR, F                       544:       addwf FSR
0181  3080     MOVLW 0x80                         545:       movlw 128
0182  2989     GOTO 0x189                         546:       goto draw_paddle
                                                  547:   
                                                  548:   ;****************************
                                                  549:   ; draw_rpaddle, dessine la
                                                  550:   ; raquette de droite.
                                                  551:   ;****************************
                                                  552:   draw_rpaddle     ; dessine raquette de droite
0183  304B     MOVLW 0x4B                         553:       movlw disp+11
0184  0084     MOVWF FSR                          554:       movwf FSR
0185  1003     BCF STATUS, 0x0                    555:       clrc
0186  0D76     RLF 0x76, W                        556:       rlf RPaddle, W
0187  0784     ADDWF FSR, F                       557:       addwf FSR
0188  3001     MOVLW 0x1                          558:       movlw 1
                                                  559:   draw_paddle
0189  0480     IORWF INDF, F                      560:       iorwf INDF
018A  0A84     INCF FSR, F                        561:       incf FSR
018B  0A84     INCF FSR, F                        562:       incf FSR
018C  0480     IORWF INDF, F                      563:       iorwf INDF
018D  0A84     INCF FSR, F                        564:       incf FSR
018E  0A84     INCF FSR, F                        565:       incf FSR
018F  0480     IORWF INDF, F                      566:       iorwf INDF
0190  0008     RETURN                             567:       return
                                                  568:   
                                                  569:   ;****************************
                                                  570:   ; draw_ball, dessine la balle
                                                  571:   ; sur la table
                                                  572:   ;****************************
                                                  573:   draw_ball       ; 24 cycles avec appel et retour
0191  304A     MOVLW 0x4A                         574:       movlw disp+10 ; les 10 premiers octets utilisé pour l'affichage du pointage
0192  0084     MOVWF FSR                          575:       movwf FSR
0193  1003     BCF STATUS, 0x0                    576:       clrc
0194  0D6F     RLF 0x6F, W                        577:       rlf bally, W  ; 2 octets par ligne, donc déplacement = y*2
0195  0784     ADDWF FSR, F                       578:       addwf FSR
0196  19EE     BTFSC 0x6E, 0x3                    579:       btfsc ballx, 3 ; si >7
0197  0A84     INCF FSR, F                        580:       incf FSR       ; octet suivant
0198  3080     MOVLW 0x80                         581:       movlw 128      ; position de la balle dans l'octet
0199  00F7     MOVWF 0x77                         582:       movwf temp     ; rotation jusqu'à la bonne position
019A  086E     MOVF 0x6E, W                       583:       movfw ballx
019B  3907     ANDLW 0x7                          584:       andlw 7        ; W= compte des rotations
019C  1903     BTFSC STATUS, 0x2                  585:       skpnz
019D  29A3     GOTO 0x1A3                         586:       goto $+6
019E  1003     BCF STATUS, 0x0                    587:       clrc
019F  0CF7     RRF 0x77, F                        588:       rrf temp
01A0  3EFF     ADDLW 0xFF                         589:       addlw H'FF'   ; W--
01A1  1D03     BTFSS STATUS, 0x2                  590:       skpz
01A2  299E     GOTO 0x19E                         591:       goto $-4
01A3  0877     MOVF 0x77, W                       592:       movfw temp
01A4  0480     IORWF INDF, F                      593:       iorwf INDF, F
01A5  0008     RETURN                             594:       return
                                                  595:   
                                                  596:   ;********************
                                                  597:   ;clear_disp
                                                  598:   ;efface l'affichage
                                                  599:   ;********************
                                                  600:   clear_disp    ; 168 cycles avec appel et retour
01A6  3040     MOVLW 0x40                         601:       movlw disp
01A7  0084     MOVWF FSR                          602:       movwf FSR
01A8  302A     MOVLW 0x2A                         603:       movlw 42
01A9  00F7     MOVWF 0x77                         604:       movwf temp
01AA  0180     CLRF INDF                          605:       clrf INDF
01AB  0A84     INCF FSR, F                        606:       incf FSR
01AC  0BF7     DECFSZ 0x77, F                     607:       decfsz temp
01AD  29AA     GOTO 0x1AA                         608:       goto $-3
01AE  0008     RETURN                             609:       return
                                                  610:   
                                                  611:   ;***********************
                                                  612:   ; draw_table, dessine
                                                  613:   ; la table en appellant
                                                  614:   ; les routines pour chaque
                                                  615:   ; élément la composant.
                                                  616:   ;************************
                                                  617:   draw_table              ; 230 avec appel et retour
01AF  21A6     CALL 0x1A6                         618:       call clear_disp     ; 168
01B0  217C     CALL 0x17C                         619:       call draw_lpaddle      ; 17
01B1  2183     CALL 0x183                         620:       call draw_rpaddle      ; 17
01B2  2191     CALL 0x191                         621:       call draw_ball      ; 24
01B3  0008     RETURN                             622:       return              ; 2
                                                  623:   
                                                  624:   ;***********************************
                                                  625:   ; digit_offset, calcule la position
                                                  626:   ;   position = digit * 10 / 2
                                                  627:   ; dans la table 'digits' pour chaque digit
                                                  628:   ; entrée: W contient le digit dans
                                                  629:   ;         les 4 bits faibles
                                                  630:   ; sortie: W contient le déplacement dans
                                                  631:   ;         la table 'digits'
                                                  632:   ; utilise temp2
                                                  633:   ;***********************************
                                                  634:   digit_offset    
01B4  390E     ANDLW 0xE                          635:       andlw H'E'  
01B5  00F8     MOVWF 0x78                         636:       movwf temp2 
01B6  1003     BCF STATUS, 0x0                    637:       clrc
01B7  0DF8     RLF 0x78, F                        638:       rlf temp2, F
01B8  0DF8     RLF 0x78, F                        639:       rlf temp2, F
01B9  07F8     ADDWF 0x78, F                      640:       addwf temp2, F
01BA  0C78     RRF 0x78, W                        641:       rrf temp2, W
01BB  0008     RETURN                             642:       return
                                                  643:   
                                                  644:   ;********************************************
                                                  645:   ; digit_row, affiche une ligne des 2 digits
                                                  646:   ;            du pointage.
                                                  647:   ; entrée: temp3, contient le pointage
                                                  648:   ;         temp, contient la rangée du glyphe (0-5)
                                                  649:   ; utilise temp2
                                                  650:   ;********************************************
                                                  651:   digit_row
01BC  0E79     SWAPF 0x79, W                      652:       swapf temp3, W   ; digit dizaine
01BD  21B4     CALL 0x1B4                         653:       call digit_offset
01BE  0777     ADDWF 0x77, W                      654:       addwf temp, W    ; ajoute déplacement pour la rangée
01BF  2062     CALL 0x62                          655:       call digits
01C0  00F8     MOVWF 0x78                         656:       movwf temp2     ; bitmap pour cette rangée
01C1  1A79     BTFSC 0x79, 0x4                    657:       btfsc temp3, 4  ; si digit pair prend les 4 bits forts
01C2  0E78     SWAPF 0x78, W                      658:       swapf temp2, W  ; si impair prend les 4 bits faibles.
01C3  39F0     ANDLW 0xF0                         659:       andlw H'F0'
01C4  0480     IORWF INDF, F                      660:       iorwf INDF
                                                  661:   digit2  ; digit unités
01C5  0879     MOVF 0x79, W                       662:       movfw temp3
01C6  21B4     CALL 0x1B4                         663:       call digit_offset
01C7  0777     ADDWF 0x77, W                      664:       addwf temp, W
01C8  2062     CALL 0x62                          665:       call digits
01C9  00F8     MOVWF 0x78                         666:       movwf temp2
01CA  1C79     BTFSS 0x79, 0x0                    667:       btfss temp3, 0
01CB  0E78     SWAPF 0x78, W                      668:       swapf temp2, W
01CC  390F     ANDLW 0xF                          669:       andlw H'F'
01CD  0480     IORWF INDF, F                      670:       iorwf INDF
01CE  0008     RETURN                             671:       return
                                                  672:   
                                                  673:   ;***********************************
                                                  674:   ; draw_score, affiche les glyphes du pointage
                                                  675:   ; de chaque joueur. L'affichage se fait par
                                                  676:   ; rangée, i.e. la première rangée des 4 glyphes
                                                  677:   ; est affichée ensuite la 2ième, etc.
                                                  678:   ; utilse: temp comme compteur de rangée
                                                  679:   ;         temp3 contient le pointage
                                                  680:   ;         FSR pointe la mémoire vidéo 'disp'
                                                  681:   ;************************************
                                                  682:   draw_score
01CF  3040     MOVLW 0x40                         683:       movlw disp
01D0  0084     MOVWF FSR                          684:       movwf FSR
01D1  01F7     CLRF 0x77                          685:       clrf temp  ; compteur lignes du glyphe
                                                  686:   next_row
01D2  086A     MOVF 0x6A, W                       687:       movfw LScore
01D3  00F9     MOVWF 0x79                         688:       movwf temp3
01D4  21BC     CALL 0x1BC                         689:       call digit_row
01D5  0A84     INCF FSR, F                        690:       incf FSR
01D6  086B     MOVF 0x6B, W                       691:       movfw RScore
01D7  00F9     MOVWF 0x79                         692:       movwf temp3
01D8  21BC     CALL 0x1BC                         693:       call digit_row
01D9  0A84     INCF FSR, F                        694:       incf FSR
01DA  0AF7     INCF 0x77, F                       695:       incf temp
01DB  3005     MOVLW 0x5                          696:       movlw 5
01DC  0277     SUBWF 0x77, W                      697:       subwf temp,W
01DD  1D03     BTFSS STATUS, 0x2                  698:       skpz
01DE  29D2     GOTO 0x1D2                         699:       goto next_row
01DF  0008     RETURN                             700:       return
                                                  701:   
                                                  702:   ; initialiation du programme.
                                                  703:   init
01E0  300F     MOVLW 0xF                          704:       set_clk_freq D'16'
01E1  0590     ANDWF OSCCON, F
01E2  3070     MOVLW 0x70
01E3  0490     IORWF OSCCON, F
01E4  0188     CLRF ANSELA                        705:       clrf ANSELA
                                                  706:   ; zero RAM
01E5  3040     MOVLW 0x40                         707:       movlw MINRAM
01E6  0084     MOVWF FSR                          708:       movwf FSR
01E7  0180     CLRF INDF                          709:       clrf INDF
01E8  0A84     INCF FSR, F                        710:       incf FSR
01E9  1F84     BTFSS FSR, 0x7                     711:       btfss FSR, 7
01EA  29E7     GOTO 0x1E7                         712:       goto $-3
                                                  713:   ; initialisation NCO
01EB  30FC     MOVLW 0xFC                         714:       set_nco_clock NCO_CLK_INTOSC
01EC  05AE     ANDWF NCO1CLK, F
01ED  3002     MOVLW 0x2
01EE  04AE     IORWF NCO1CLK, F
01EF  17AD     BSF NCO1CON, 0x7                   715:       enable_nco
                                                  716:   ; initialisation PWM1
01F0  30FE     MOVLW 0xFE                         717:       movlw PWM_PERIOD
01F1  0092     MOVWF PR2                          718:       movwf PR2
01F2  1086     BCF TRISA, 0x1                     719:       bcf TRISA, SYNC_OUT
01F3  1619     BSF PWM2CON, 0x4                   720:       set_pwm_polarity  PWM_CH2, PWM_POL_L
01F4  1719     BSF PWM2CON, 0x6                   721:       enable_pwm_output PWM_CH2
01F5  1799     BSF PWM2CON, 0x7                   722:       enable_pwm_channel PWM_CH2
01F6  148D     BSF PIE1, 0x1                      723:       enable_tmr2_int
01F7  170B     BSF INTCON, 0x6                    724:       enable_periph_int
01F8  20AE     CALL 0xAE                          725:       call set_pause
01F9  1513     BSF T2CON, 0x2                     726:       bsf T2CON, TMR2ON
01FA  178B     BSF INTCON, 0x7                    727:       enable_interrupt
                                                  728:   
                                                  729:   ; il ne se passe rien dans la procédure
                                                  730:   ; principale car tout est fait pendant
                                                  731:   ; l'interruption du TIMER2
                                                  732:   main
01FB  29FB     GOTO 0x1FB                         733:       goto main 
2007  0000     NOP                                734:       end
                                                  735:   
                                                  736:   
                                                  737:   
                                                  738:   
